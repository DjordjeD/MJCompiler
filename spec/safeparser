package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;

// import java.io.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:
	private boolean errorDetected = false;
	private Logger log = Logger.getLogger(getClass());

    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }

    public void syntax_error(Symbol cur_token) {
        report_error("\nSyntax error", cur_token);
    }

    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatal syntax error, cannot continue parsing", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message);
    	if (info instanceof Symbol)
            msg.append (" at line ").append(((Symbol)info).left);
        log.error(msg.toString());
    }

    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message);
    	if (info instanceof Symbol)
            msg.append (" at line ").append(((Symbol)info).left);
        log.info(msg.toString());
    }

		public boolean errorOccured() {
			return errorDetected;
		}
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null)
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

terminal PROG, LBRACE, RBRACE, CONST, SEMI;
terminal Integer NUMBER, Character CHARACTER, Boolean BOOLEAN;
terminal String IDENT;

nonterminal Program, Declarations, Declaration,ConstDeclaration, VarDeclaration, ClassDeclaration;
nonterminal Type, IdentAssign;
nonterminal VarDecl, VarArrayList;
nonterminal ClassDecl, ClassBody, VarDeclList;


precedence left ELSE;

Program ::= (Program) PROG ProgramName Declarations LBRACE MethodDeclList RBRACE;

ProgramName ::= (ProgramName) IDENT : programName;

Declarations ::= (DeclarationList) Declarations Declaration | (DeclarationEmpty);

Declaration ::= (ConstDeclarationType) ConstDeclaration | (VarDeclarationType) VarDeclaration
                | (ClassDeclarationType) ClassDeclaration;

ConstDeclaration ::= (ConstDeclaration) CONST Type IdentAssign SEMI;

Type ::= (Type) IDENT:typeName;

IdentAssign ::= (IdentAssignNumber) IDENT:name EQUAL NUMBER:numberValue
							| (IdentAssignCharacter) IDENT:name EQUAL CHARACTER:characterValue
							|	(IdentAssignBoolean) IDENT:name EQUAL BOOLEAN:booleanValue;

VarDeclaration ::= IDENT;

ClassDeclaration ::= IDENT;

