package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;

// import java.io.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:
	private boolean errorDetected = false;
	private Logger log = Logger.getLogger(getClass());

    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }

    public void syntax_error(Symbol cur_token) {
        report_error("\nSyntax error", cur_token);
    }

    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatal syntax error, cannot continue parsing", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message);
    	if (info instanceof Symbol)
            msg.append (" at line ").append(((Symbol)info).left);
        log.error(msg.toString());
    }

    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message);
    	if (info instanceof Symbol)
            msg.append (" at line ").append(((Symbol)info).left);
        log.info(msg.toString());
    }

		public boolean errorOccured() {
			return errorDetected;
		}
:}

scan with {:

	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null)
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}




terminal PROG;
terminal BREAK, IF, ELSE, CONST, DO, WHILE, NEW;
terminal PRINT, READ, RETURN;
terminal VOID, CONTINUE, GOTO;

terminal Integer NUMBER;
terminal Character CHARACTER;
terminal Boolean BOOLEAN;
terminal String IDENT;

terminal PLUS, MINUS, DIV,MUL, MOD;
terminal RELEQUAL, NOTEQUAL, GREATER, GREATEREQ, LESS, LESSEQ, AND, OR;
terminal EQUAL, INCR, DECR, SEMI, COMMA, DOT;
terminal LPAREN, RPAREN, LBRACE, RBRACE, LSQUARE, RSQUARE, QUESTION, COLON, RECORD;

nonterminal Program Program;
nonterminal Declarations Declarations;
nonterminal Declaration Declaration;
nonterminal ConstDeclaration ConstDeclaration;
nonterminal ClassDeclaration ClassDeclaration;
nonterminal IdentAssign IdentAssign;
nonterminal ConstIdentSwitch ConstIdentSwitch;
nonterminal VarDeclaration VarDeclaration;
nonterminal VarDeclarationSwitch VarDeclarationSwitch;
nonterminal VarDeclarationList VarDeclarationList;
nonterminal MethodDeclList MethodDeclList;
nonterminal MethodDeclaration MethodDeclaration;
nonterminal MethodSignature MethodSignature;
nonterminal FormPars FormPars;
nonterminal FormParsSwitch FormParsSwitch;
nonterminal FormParsSingleOrArray FormParsSingleOrArray;

nonterminal StatementList StatementList;
nonterminal Statements Statements;
nonterminal Statement Statement;
nonterminal SingleStatement SingleStatement;
nonterminal DesignatorStatement DesignatorStatement  /* DesignatorInElement*/ ;
nonterminal  ActPars ActPars;
nonterminal IfHeader IfHeader;
nonterminal ElseHeader ElseHeader;
nonterminal DoWhileBodyEnd DoWhileBodyEnd;
nonterminal DoWhileBodyStart DoWhileBodyStart;
nonterminal Addop Addop;
nonterminal Mulop Mulop;
nonterminal Relop Relop;

nonterminal rs.etf.pp1.symboltable.concepts.Obj Condition, CondTerm ;
nonterminal rs.etf.pp1.symboltable.concepts.Obj CondFact ;
nonterminal java.lang.Integer PcGetter;

nonterminal OptionalPrint OptionalPrint;
nonterminal RecordBody RecordBody;

nonterminal rs.etf.pp1.symboltable.concepts.Obj ProgramName,VarDeclarationSingleOrArray, Designator, MethodTypeName, Label, RecordDeclaration, RecordLeft, DesignatorRecordField;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Type, Expr, Term, Factor, MethodReturn,OptionalExpr;


precedence left ELSE;

Program ::= (Program) PROG ProgramName:P1 Declarations:D2 LBRACE MethodDeclList:M3 RBRACE {: RESULT=new Program(P1, D2, M3); RESULT.setLine(P1left); :};

ProgramName ::= (ProgramName) IDENT : programName {: RESULT=new ProgramName(programName); RESULT.setLine(programNameleft); :};


Declarations ::= (DeclarationList) Declarations:D1 Declaration:D2 {: RESULT=new DeclarationList(D1, D2); RESULT.setLine(D1left); :}
                 | (DeclarationEmpty) {: RESULT=new DeclarationEmpty(); :};


Declaration ::= (ConstDeclarationType) ConstDeclaration:C1 {: RESULT=new ConstDeclarationType(C1); RESULT.setLine(C1left); :}
                | (VarDeclarationType) VarDeclaration:V1 {: RESULT=new VarDeclarationType(V1); RESULT.setLine(V1left); :}
                | (RecordDeclarationType) RecordDeclaration:R1 {: RESULT=new RecordDeclarationType(R1); RESULT.setLine(R1left); :};



ConstDeclaration ::= (ConstDeclarationClass) CONST Type:T1 ConstIdentSwitch:C2 SEMI {: RESULT=new ConstDeclarationClass(T1, C2); RESULT.setLine(T1left); :};


ConstIdentSwitch ::= (IdentAssignSingle) IdentAssign:I1 {: RESULT=new IdentAssignSingle(I1); RESULT.setLine(I1left); :}
                | (IdentAssignComma) ConstIdentSwitch:C1 COMMA IdentAssign:I2 {: RESULT=new IdentAssignComma(C1, I2); RESULT.setLine(C1left); :};

IdentAssign ::= (IdentAssignNumber) IDENT:name EQUAL NUMBER:numberVal {: RESULT=new IdentAssignNumber(name, numberVal); RESULT.setLine(nameleft); :}
							| (IdentAssignCharacter) IDENT:name EQUAL CHARACTER:characterVal {: RESULT=new IdentAssignCharacter(name, characterVal); RESULT.setLine(nameleft); :}
							| (IdentAssignBoolean) IDENT:name EQUAL BOOLEAN:booleanVal {: RESULT=new IdentAssignBoolean(name, booleanVal); RESULT.setLine(nameleft); :};


VarDeclaration ::= (VarDeclarationClass) Type:T1 VarDeclarationSwitch:V2 SEMI {: RESULT=new VarDeclarationClass(T1, V2); RESULT.setLine(T1left); :}
                    | (VarDeclarationError) error:l
					{: parser.report_error("Recovered VarDeclaration from error to , ; or { at line " + lleft, null);  :} {: RESULT=new VarDeclarationError(); :};

VarDeclarationSwitch ::= (VarDeclarationSingleClass) VarDeclarationSingleOrArray:V1 {: RESULT=new VarDeclarationSingleClass(V1); RESULT.setLine(V1left); :} |
                          (VarDeclarationComma) VarDeclarationSwitch:V1 COMMA VarDeclarationSingleOrArray:V2 {: RESULT=new VarDeclarationComma(V1, V2); RESULT.setLine(V1left); :};

VarDeclarationSingleOrArray ::= (VarDeclarationNormal) IDENT:varName {: RESULT=new VarDeclarationNormal(varName); RESULT.setLine(varNameleft); :} | (VarDeclarationArray) IDENT:varName LSQUARE RSQUARE {: RESULT=new VarDeclarationArray(varName); RESULT.setLine(varNameleft); :};

Type ::= (Type) IDENT:type {: RESULT=new Type(type); RESULT.setLine(typeleft); :};

VarDeclarationList ::= (VarDeclarationEmpty) {: RESULT=new VarDeclarationEmpty(); :} |	(VarDeclarationElement) VarDeclarationList:V1 VarDeclaration:V2 {: RESULT=new VarDeclarationElement(V1, V2); RESULT.setLine(V1left); :};


MethodDeclList ::=   (MethodDeclarationEmpty) {: RESULT=new MethodDeclarationEmpty(); :} | (MethodDeclarationListClass) MethodDeclList:M1 MethodDeclaration:M2 {: RESULT=new MethodDeclarationListClass(M1, M2); RESULT.setLine(M1left); :};

MethodDeclaration ::= (MethodDeclarationClass) MethodSignature:M1 StatementList:S2 RBRACE {: RESULT=new MethodDeclarationClass(M1, S2); RESULT.setLine(M1left); :};

/* potencijalno problem ako
ide LBRACE IZMEDJU STATEMENT LISTA*/


MethodSignature ::= (MethodSignatureClass) MethodTypeName:M1 LPAREN FormPars:F2 RPAREN VarDeclarationList:V3 LBRACE {: RESULT=new MethodSignatureClass(M1, F2, V3); RESULT.setLine(M1left); :};

MethodTypeName ::=  (MethodTypeNameClass) MethodReturn:M1 IDENT:methodName {: RESULT=new MethodTypeNameClass(M1, methodName); RESULT.setLine(M1left); :};

MethodReturn ::= (MethodTypeOther) Type:T1 {: RESULT=new MethodTypeOther(T1); RESULT.setLine(T1left); :} | (MethodTypeVoid) VOID {: RESULT=new MethodTypeVoid(); :};

FormPars ::= (FormParsEmpty) {: RESULT=new FormParsEmpty(); :}
            | (FormParsSwitchClass) FormParsSwitch:F1 {: RESULT=new FormParsSwitchClass(F1); RESULT.setLine(F1left); :}
            | (FormParsError) error:l {: parser.report_error("Recovered formPars from error to , or ) at line " + lleft, null);  :} {: RESULT=new FormParsError(); :};

FormParsSwitch ::= (FormParsSingleClass) FormParsSingleOrArray:F1 {: RESULT=new FormParsSingleClass(F1); RESULT.setLine(F1left); :}
                | (FormParsComma) FormParsSwitch:F1 COMMA FormParsSingleOrArray:F2 {: RESULT=new FormParsComma(F1, F2); RESULT.setLine(F1left); :};

FormParsSingleOrArray ::= (FormParameterNormal) Type:T1 IDENT:paramVal {: RESULT=new FormParameterNormal(T1, paramVal); RESULT.setLine(T1left); :}
                | (FormParameterArray)Type:T1 IDENT:paramVal LSQUARE RSQUARE {: RESULT=new FormParameterArray(T1, paramVal); RESULT.setLine(T1left); :};



StatementList ::= (StatementListClass) StatementList:S1 Statement:S2 {: RESULT=new StatementListClass(S1, S2); RESULT.setLine(S1left); :} | (StatementListEmpty) {: RESULT=new StatementListEmpty(); :};

Statement ::= (DesignatorStatementClass) DesignatorStatement:D1 SEMI {: RESULT=new DesignatorStatementClass(D1); RESULT.setLine(D1left); :}
                                  |	(StatementRead) READ LPAREN Designator:D1 RPAREN SEMI {: RESULT=new StatementRead(D1); RESULT.setLine(D1left); :}
                                  | (StatementPrint) PRINT LPAREN Expr:E1 OptionalPrint:O2 RPAREN SEMI {: RESULT=new StatementPrint(E1, O2); RESULT.setLine(E1left); :}
                                  | (StatementGoto) GOTO Label:L1 SEMI {: RESULT=new StatementGoto(L1); RESULT.setLine(L1left); :}
                                  | (StatementIf) IfHeader:I1 PcGetter:trueStart Statement:S2 {: RESULT=new StatementIf(I1, trueStart, S2); RESULT.setLine(I1left); :}
                                | (StatementIfElse) IfHeader:I1 PcGetter:trueStart Statement:S2 ElseHeader:E3 PcGetter:falseStart Statement:S4 {: RESULT=new StatementIfElse(I1, trueStart, S2, E3, falseStart, S4); RESULT.setLine(I1left); :}
                                | (StatementDoWhile) DoWhileBodyStart:D1 Statement:S2 DoWhileBodyEnd:D3 LPAREN Condition:C4 RPAREN SEMI {: RESULT=new StatementDoWhile(D1, S2, D3, C4); RESULT.setLine(D1left); :}
                                |	(StatementBreak) BREAK SEMI {: RESULT=new StatementBreak(); :}
                                |	(StatementContinue) CONTINUE SEMI {: RESULT=new StatementContinue(); :}
                                | (StatementReturn) RETURN OptionalExpr:O1 SEMI {: RESULT=new StatementReturn(O1); RESULT.setLine(O1left); :}
                                |	(StatementBlock) LBRACE StatementList:S1 RBRACE {: RESULT=new StatementBlock(S1); RESULT.setLine(S1left); :}
                                | (StatementLabel) Label:L1 COLON Statement:S2 {: RESULT=new StatementLabel(L1, S2); RESULT.setLine(L1left); :};

DoWhileBodyStart ::= (DoWhileBodyStart) DO {: RESULT=new DoWhileBodyStart(); :};
DoWhileBodyEnd ::= (DoWhileBodyEnd) WHILE {: RESULT=new DoWhileBodyEnd(); :};
Label ::= (LabelDefinition) IDENT: name {: RESULT=new LabelDefinition(name); RESULT.setLine(nameleft); :};

OptionalExpr ::=  (OptionalExprEmpty) {: RESULT=new OptionalExprEmpty(); :} | (OptionalExprExpr) Expr:E1 {: RESULT=new OptionalExprExpr(E1); RESULT.setLine(E1left); :};

OptionalPrint ::= (OptionalPrintEmpty) {: RESULT=new OptionalPrintEmpty(); :} | (OptionalPrintComma) COMMA NUMBER:number {: RESULT=new OptionalPrintComma(number); RESULT.setLine(numberleft); :};

IfHeader ::= (IfHeader) IF LPAREN Condition:C1 RPAREN {: RESULT=new IfHeader(C1); RESULT.setLine(C1left); :};

ElseHeader ::= (ElseHeader) ELSE {: RESULT=new ElseHeader(); :};

PcGetter ::= (PcGetter) {: RESULT=new PcGetter(); :};

ActPars ::= (ActParsEmpty) {: RESULT=new ActParsEmpty(); :} | (ActParsSingle) Expr:E1 {: RESULT=new ActParsSingle(E1); RESULT.setLine(E1left); :} |	(ActParsMultiple) ActPars:A1 COMMA Expr:E2 {: RESULT=new ActParsMultiple(A1, E2); RESULT.setLine(A1left); :};

RecordDeclaration ::= (RecordDefinition) RecordLeft:R1 RecordBody:R2 {: RESULT=new RecordDefinition(R1, R2); RESULT.setLine(R1left); :};

RecordLeft ::= (RecordLeft) RECORD IDENT:recordName {: RESULT=new RecordLeft(recordName); RESULT.setLine(recordNameleft); :};

RecordBody ::= (RecordBody) LBRACE VarDeclarationList:V1 RBRACE {: RESULT=new RecordBody(V1); RESULT.setLine(V1left); :};

DesignatorStatement ::= (DesignatorError)  error:l {: parser.report_error("Recovered DesignatorError from error to ; at line " + lleft, null);  :} {: RESULT=new DesignatorError(); :}
                        | (DesignatorExpr) Designator:D1 LPAREN ActPars:A2 RPAREN {: RESULT=new DesignatorExpr(D1, A2); RESULT.setLine(D1left); :}
                        | (DesignatorEquals) Designator:D1 EQUAL Expr:E2 {: RESULT=new DesignatorEquals(D1, E2); RESULT.setLine(D1left); :}
                       | (DesignatorPlusPlus) Designator:D1 INCR {: RESULT=new DesignatorPlusPlus(D1); RESULT.setLine(D1left); :} | (DesignatorMinusMinus) Designator:D1 DECR {: RESULT=new DesignatorMinusMinus(D1); RESULT.setLine(D1left); :};

Designator ::= (DesignatorSingle) IDENT:origin {: RESULT=new DesignatorSingle(origin); RESULT.setLine(originleft); :}
            |	(DesignatorField) Designator:D1 DesignatorRecordField:D2 {: RESULT=new DesignatorField(D1, D2); RESULT.setLine(D1left); :}
        | (DesignatorMultiple) Designator:D1 LSQUARE Expr:E2 RSQUARE {: RESULT=new DesignatorMultiple(D1, E2); RESULT.setLine(D1left); :};


DesignatorRecordField ::= (DesignatorRecordField) DOT IDENT:field {: RESULT=new DesignatorRecordField(field); RESULT.setLine(fieldleft); :};

/*DesignatorInElement ::= (DesignatorInElementClass) Designator;*/

/*Expr ::= 	(ExprSimpleClass) ExprSimple; */

Expr ::= (ExprSingle) Term:T1 {: RESULT=new ExprSingle(T1); RESULT.setLine(T1left); :} | (ExprMinus) MINUS Term:T1 {: RESULT=new ExprMinus(T1); RESULT.setLine(T1left); :} | (ExprMultiple) Expr:E1 Addop:A2 Term:T3 {: RESULT=new ExprMultiple(E1, A2, T3); RESULT.setLine(E1left); :};

Term ::= (TermSingle) Factor:F1 {: RESULT=new TermSingle(F1); RESULT.setLine(F1left); :} | (TermMultiple) Term:T1 Mulop:M2 Factor:F3 {: RESULT=new TermMultiple(T1, M2, F3); RESULT.setLine(T1left); :};

Factor ::= (FactorNumber) NUMBER:value {: RESULT=new FactorNumber(value); RESULT.setLine(valueleft); :}
        |	(FactorCharacter) CHARACTER:value {: RESULT=new FactorCharacter(value); RESULT.setLine(valueleft); :}
        |	(FactorBoolean) BOOLEAN:value {: RESULT=new FactorBoolean(value); RESULT.setLine(valueleft); :}
        |	(FactorNewScalar) NEW Type:T1 {: RESULT=new FactorNewScalar(T1); RESULT.setLine(T1left); :}
        | (FactorNewArray) NEW Type:T1 LSQUARE Expr:E2 RSQUARE {: RESULT=new FactorNewArray(T1, E2); RESULT.setLine(T1left); :}
        | (FactorParExpr) LPAREN Expr:E1 RPAREN {: RESULT=new FactorParExpr(E1); RESULT.setLine(E1left); :}
        | (FactorDesignator) Designator:D1 {: RESULT=new FactorDesignator(D1); RESULT.setLine(D1left); :}
        | (FactorDesignatorMultiple) Designator:D1 LPAREN ActPars:A2 RPAREN {: RESULT=new FactorDesignatorMultiple(D1, A2); RESULT.setLine(D1left); :};


/* da li treba DesignatorCall ::= (DesignatorCall) Designator; */

Relop ::= (RelopEquals) RELEQUAL {: RESULT=new RelopEquals(); :}
          |	(RelopNotEquals) NOTEQUAL {: RESULT=new RelopNotEquals(); :}
		  |	(RelopGreater) GREATER {: RESULT=new RelopGreater(); :}
		  |	(RelopGreaterEquals) GREATEREQ {: RESULT=new RelopGreaterEquals(); :}
		  |	(RelopLess) LESS {: RESULT=new RelopLess(); :}
		  | (RelopLessEquals) LESSEQ {: RESULT=new RelopLessEquals(); :};


Addop ::= (AddopPlus) PLUS {: RESULT=new AddopPlus(); :}
				|	(AddopMinus) MINUS {: RESULT=new AddopMinus(); :};

Mulop ::= (MulopMul) MUL {: RESULT=new MulopMul(); :}
				|	(MulopDiv) DIV {: RESULT=new MulopDiv(); :}
				|	(MulopMod) MOD {: RESULT=new MulopMod(); :};

CondFact ::= (CondExprSingle) Expr:E1 {: RESULT=new CondExprSingle(E1); RESULT.setLine(E1left); :} | (CondExprMultiple) CondFact:C1 Relop:R2 Expr:E3 {: RESULT=new CondExprMultiple(C1, R2, E3); RESULT.setLine(C1left); :};

CondTerm ::= (CondTermSingle) CondFact:C1 {: RESULT=new CondTermSingle(C1); RESULT.setLine(C1left); :} | (CondTermMultiple) CondTerm:C1 AND CondFact:C2 {: RESULT=new CondTermMultiple(C1, C2); RESULT.setLine(C1left); :};

Condition ::= (ConditionSingle) CondTerm:C1 {: RESULT=new ConditionSingle(C1); RESULT.setLine(C1left); :} | (ConditionMultiple) Condition:C1 OR CondTerm:C2 {: RESULT=new ConditionMultiple(C1, C2); RESULT.setLine(C1left); :}
			| (ConditionError) error:l {: parser.report_error("Recovered ConditionError ) at line " + lleft, null);  :} {: RESULT=new ConditionError(); :};



