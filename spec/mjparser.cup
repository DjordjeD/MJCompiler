package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;

// import java.io.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:
	private boolean errorDetected = false;
	private Logger log = Logger.getLogger(getClass());

    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }

    public void syntax_error(Symbol cur_token) {
        report_error("\nSyntax error", cur_token);
    }

    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatal syntax error, cannot continue parsing", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message);
    	if (info instanceof Symbol)
            msg.append (" at line ").append(((Symbol)info).left);
        log.error(msg.toString());
    }

    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message);
    	if (info instanceof Symbol)
            msg.append (" at line ").append(((Symbol)info).left);
        log.info(msg.toString());
    }

		public boolean errorOccured() {
			return errorDetected;
		}
:}

scan with {:

	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null)
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}




terminal PROG;
terminal BREAK, IF, ELSE, CONST, DO, WHILE, NEW;
terminal PRINT, READ, RETURN;
terminal VOID, CONTINUE, GOTO;

terminal Integer NUMBER;
terminal Character CHARACTER;
terminal Boolean BOOLEAN;
terminal String IDENT;

terminal PLUS, MINUS, DIV,MUL, MOD;
terminal RELEQUAL, NOTEQUAL, GREATER, GREATEREQ, LESS, LESSEQ, AND, OR;
terminal EQUAL, INCR, DECR, SEMI, COMMA, DOT;
terminal LPAREN, RPAREN, LBRACE, RBRACE, LSQUARE, RSQUARE, QUESTION, COLON, RECORD;

nonterminal Program, Declarations, Declaration, ConstDeclaration, ClassDeclaration;
nonterminal IdentAssign, ConstIdentSwitch;
nonterminal VarDeclaration, VarDeclarationSwitch, VarDeclarationList;
nonterminal MethodDeclList, MethodDeclaration, MethodSignature;
nonterminal FormPars, FormParsSwitch, FormParsSingleOrArray;

nonterminal StatementList, Statements, Statement, SingleStatement;
nonterminal DesignatorStatement,  /* DesignatorInElement*/ ;
nonterminal  ActPars;
nonterminal IfHeader, ElseHeader, DoWhileBodyEnd;
nonterminal Addop, Mulop, Relop;

nonterminal rs.etf.pp1.symboltable.concepts.Obj Condition, CondTerm ;
nonterminal rs.etf.pp1.symboltable.concepts.Obj CondFact ;
nonterminal java.lang.Integer PcGetter,DoWhileBodyStart;

nonterminal OptionalPrint, RecordBody;

nonterminal rs.etf.pp1.symboltable.concepts.Obj ProgramName,VarDeclarationSingleOrArray, Designator, MethodTypeName, Label, RecordDeclaration, RecordLeft, DesignatorRecordField;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Type, Expr, Term, Factor, MethodReturn,OptionalExpr;


precedence left ELSE;

Program ::= (Program) PROG ProgramName Declarations LBRACE MethodDeclList RBRACE;

ProgramName ::= (ProgramName) IDENT : programName;


Declarations ::= (DeclarationList) Declarations Declaration
                 | (DeclarationEmpty);


Declaration ::= (ConstDeclarationType) ConstDeclaration
                | (VarDeclarationType) VarDeclaration
                | (RecordDeclarationType) RecordDeclaration;



ConstDeclaration ::= (ConstDeclarationClass) CONST Type ConstIdentSwitch SEMI;


ConstIdentSwitch ::= (IdentAssignSingle) IdentAssign
                | (IdentAssignComma) ConstIdentSwitch COMMA IdentAssign;

IdentAssign ::= (IdentAssignNumber) IDENT:name EQUAL NUMBER:numberVal
							| (IdentAssignCharacter) IDENT:name EQUAL CHARACTER:characterVal
							| (IdentAssignBoolean) IDENT:name EQUAL BOOLEAN:booleanVal;


VarDeclaration ::= (VarDeclarationClass) Type VarDeclarationSwitch SEMI
                    | (VarDeclarationError) error:l
					{: parser.report_error("Recovered VarDeclaration from error to , ; or { at line " + lleft, null);  :};

VarDeclarationSwitch ::= (VarDeclarationSingleClass) VarDeclarationSingleOrArray |
                          (VarDeclarationComma) VarDeclarationSwitch COMMA VarDeclarationSingleOrArray;

VarDeclarationSingleOrArray ::= (VarDeclarationNormal) IDENT:varName | (VarDeclarationArray) IDENT:varName LSQUARE RSQUARE;

Type ::= (Type) IDENT:type;

VarDeclarationList ::= (VarDeclarationEmpty) |	(VarDeclarationElement) VarDeclarationList VarDeclaration;


MethodDeclList ::=   (MethodDeclarationEmpty) | (MethodDeclarationListClass) MethodDeclList MethodDeclaration;

MethodDeclaration ::= (MethodDeclarationClass) MethodSignature StatementList RBRACE;

/* potencijalno problem ako
ide LBRACE IZMEDJU STATEMENT LISTA*/


MethodSignature ::= (MethodSignatureClass) MethodTypeName LPAREN FormPars RPAREN VarDeclarationList LBRACE;

MethodTypeName ::=  (MethodTypeNameClass) MethodReturn IDENT:methodName;

MethodReturn ::= (MethodTypeOther) Type | (MethodTypeVoid) VOID;

FormPars ::= (FormParsEmpty)
            | (FormParsSwitchClass) FormParsSwitch
            | (FormParsError) error:l {: parser.report_error("Recovered formPars from error to , or ) at line " + lleft, null);  :};

FormParsSwitch ::= (FormParsSingleClass) FormParsSingleOrArray
                | (FormParsComma) FormParsSwitch COMMA FormParsSingleOrArray;

FormParsSingleOrArray ::= (FormParameterNormal) Type IDENT:paramVal
                | (FormParameterArray)Type IDENT:paramVal LSQUARE RSQUARE;



StatementList ::= (StatementListClass) StatementList Statement | (StatementListEmpty);

Statement ::= (DesignatorStatementClass) DesignatorStatement SEMI
                                  |	(StatementRead) READ LPAREN Designator RPAREN SEMI
                                  | (StatementPrint) PRINT LPAREN Expr OptionalPrint RPAREN SEMI
                                  | (StatementGoto) GOTO Label SEMI
                                  | (StatementIf) IfHeader PcGetter:trueStart Statement
                                | (StatementIfElse) IfHeader PcGetter:trueStart Statement ElseHeader PcGetter:falseStart Statement
                                | (StatementDoWhile) DoWhileBodyStart:doWhileStart Statement DoWhileBodyEnd LPAREN Condition RPAREN SEMI
                                |	(StatementBreak) BREAK SEMI
                                |	(StatementContinue) CONTINUE SEMI
                                | (StatementReturn) RETURN OptionalExpr SEMI
                                |	(StatementBlock) LBRACE StatementList RBRACE
                                | (StatementLabel) Label COLON Statement;

DoWhileBodyStart ::= (DoWhileBodyStart) DO;
DoWhileBodyEnd ::= (DoWhileBodyEnd) WHILE;
Label ::= (LabelDefinition) IDENT: name;

OptionalExpr ::=  (OptionalExprEmpty) | (OptionalExprExpr) Expr;

OptionalPrint ::= (OptionalPrintEmpty) | (OptionalPrintComma) COMMA NUMBER:number;

IfHeader ::= (IfHeader) IF LPAREN Condition RPAREN;

ElseHeader ::= (ElseHeader) ELSE;

PcGetter ::= (PcGetter);

ActPars ::= (ActParsEmpty) | (ActParsSingle) Expr |	(ActParsMultiple) ActPars COMMA Expr;

RecordDeclaration ::= (RecordDefinition) RecordLeft RecordBody;

RecordLeft ::= (RecordLeft) RECORD IDENT:recordName;

RecordBody ::= (RecordBody) LBRACE VarDeclarationList RBRACE;

DesignatorStatement ::= (DesignatorError)  error:l {: parser.report_error("Recovered DesignatorError from error to ; at line " + lleft, null);  :}
                        | (DesignatorExpr) Designator LPAREN ActPars RPAREN
                        | (DesignatorEquals) Designator EQUAL Expr
                       | (DesignatorPlusPlus) Designator INCR | (DesignatorMinusMinus) Designator DECR;

Designator ::= (DesignatorSingle) IDENT:origin
            |	(DesignatorField) Designator DesignatorRecordField
        | (DesignatorMultiple) Designator LSQUARE Expr RSQUARE;


DesignatorRecordField ::= (DesignatorRecordField) DOT IDENT:field;

/*DesignatorInElement ::= (DesignatorInElementClass) Designator;*/

/*Expr ::= 	(ExprSimpleClass) ExprSimple; */

Expr ::= (ExprSingle) Term | (ExprMinus) MINUS Term | (ExprMultiple) Expr Addop Term;

Term ::= (TermSingle) Factor | (TermMultiple) Term Mulop Factor;

Factor ::= (FactorNumber) NUMBER:value
        |	(FactorCharacter) CHARACTER:value
        |	(FactorBoolean) BOOLEAN:value
        |	(FactorNewScalar) NEW Type
        | (FactorNewArray) NEW Type LSQUARE Expr RSQUARE
        | (FactorParExpr) LPAREN Expr RPAREN
        | (FactorDesignator) Designator
        | (FactorDesignatorMultiple) Designator LPAREN ActPars RPAREN;


/* da li treba DesignatorCall ::= (DesignatorCall) Designator; */

Relop ::= (RelopEquals) RELEQUAL
          |	(RelopNotEquals) NOTEQUAL
		  |	(RelopGreater) GREATER
		  |	(RelopGreaterEquals) GREATEREQ
		  |	(RelopLess) LESS
		  | (RelopLessEquals) LESSEQ;


Addop ::= (AddopPlus) PLUS
				|	(AddopMinus) MINUS;

Mulop ::= (MulopMul) MUL
				|	(MulopDiv) DIV
				|	(MulopMod) MOD;

CondFact ::= (CondExprSingle) Expr | (CondExprMultiple) CondFact Relop Expr;

CondTerm ::= (CondTermSingle) CondFact | (CondTermMultiple) CondTerm AND CondFact;

Condition ::= (ConditionSingle) CondTerm | (ConditionMultiple) Condition OR CondTerm
			| (ConditionError) error:l {: parser.report_error("Recovered ConditionError ) at line " + lleft, null);  :};



